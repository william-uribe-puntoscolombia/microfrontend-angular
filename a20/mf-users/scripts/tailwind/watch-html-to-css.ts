/**
 * This script processes .html files to generate a corresponding Tailwind CSS file for each component.
 * Instead of bundling all styles into a single file (like styles.css), this approach creates
 * a separate CSS file with only the necessary styles for each component.
 *
 * Analysis shows that while some CSS classes might be duplicated across files,
 * this method results in a smaller overall footprint by not including the entire
 * boilerplate for every micro-frontend.
 *
 * Verbose: use: VERBOSE=true bun tw
 */
import { exec } from 'child_process';
import chokidar from 'chokidar';
import log from 'consola';
import fs from 'fs';
import path from 'path';

const DIR_TO_WATCH = './src';
const PROCESS_ARGS = process.argv.slice(2);
const IS_SINGLE_RUN = PROCESS_ARGS.includes('--once');

const VERBOSE = process.env.VERBOSE === 'true';
log.level = VERBOSE ? 4 : 2;

/**
 * Ignores files that are not HTML files.
 * @param filePath - The path of the file to check.
 * @param stats - The fs.Stats object for the file.
 * @returns True if the file should be ignored, false otherwise.
 */
const shouldIgnore = (filePath: string, stats?: fs.Stats): boolean => {
  return stats?.isFile() === true && !filePath.endsWith('.html');
};

/**
 * Generates a Tailwind CSS file for a specific HTML file.
 * @param htmlFilePath - The path to the source HTML file.
 */
function buildCss(htmlFilePath: string): void {
  const dir = path.dirname(htmlFilePath);
  const baseName = path.basename(htmlFilePath, '.html');
  const cssFileName = `${baseName}.tailwind.css`;
  const cssPath = path.join(dir, cssFileName);
  const baseCssPath = path.resolve('scripts/tailwind/config.css');

  // A corresponding *.tailwind.css file must already exist for it to be generated.
  if (!fs.existsSync(cssPath)) {
    return;
  }

  // Command to execute Tailwind CSS.
  const tailwindCommand = `bun tailwindcss -i ${baseCssPath} -o ${cssFileName} --cwd ${dir}`; // --minify

  exec(tailwindCommand, (error, stdout, stderr) => {
    if (error) {
      log.error(`- Error executing Tailwind CLI for ${htmlFilePath}:\n`, error);
      return;
    }

    if (stderr && !stderr.includes('tailwindcss')) {
      log.error(`- STDERR for ${htmlFilePath}: ${stderr}`);
    }

    // Prepend an auto-generated comment to the file.
    try {
      const autogeneratedComment = '/* This file is auto-generated. Do not edit directly. */\n';
      const existingContent = fs.readFileSync(cssPath, 'utf-8');
      fs.writeFileSync(cssPath, autogeneratedComment + existingContent);
    } catch (readWriteError) {
      log.error(`- Failed to prepend comment to ${cssPath}:`, readWriteError);
    }
  });
}

// Main logic to watch files or run once.
const watcher = chokidar.watch(DIR_TO_WATCH, {
  persistent: !IS_SINGLE_RUN,
  ignored: shouldIgnore,
});

const eventToWatch = IS_SINGLE_RUN ? 'add' : 'change';
const logMessage = IS_SINGLE_RUN
  ? (filePath: string) => log.success(`Add: ${filePath}`)
  : (filePath: string) => log.success(`Change: ${filePath}`);

log.info(IS_SINGLE_RUN ? 'Running in --once mode...' : `Watching for changes in: ${DIR_TO_WATCH}`);

watcher.on(eventToWatch, (filePath) => {
  logMessage(filePath);
  buildCss(filePath);
});
